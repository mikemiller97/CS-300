# Advantages and disadvantages of each data structure
    Each of the three data structures considered for this project (vectors, hash-tables, and BSTs) come with their own advantages and disadvantages. Beginning with vectors, one advantage they have is they are easy to create in regards to memory. As seen from the above tables, the vector had the lowest cost to being created. This can save resources for the program being created when the course list is being created. Another advantage vectors have is they can be sorted with a quick algorithm. If one were to, for example, sort the created vector of courses using the quicksort method, the runtime of such a method would only take O(N log N) on average. This is an efficient way to organize the data in this project alphanumerically so it can be printed to the terminal for the user. 
	Vectors are not without their disadvantages, however. One such disadvantage is when it needs to be searched. Due to the nature of how a vector is organized, if one is searching for a specific value, it is typically done through the implementation of a for loop. In the case of this software, the student would enter a class code and then the software would cycle through the courses one by one until it is found. If it is a code kept in a later element of the vector, this means it may be necessary to search through the entire vector for the class needing to be accessed. Another disadvantage of using vectors is that when it is resized, the computer must essentially make a copy of the vector to be adjusted, add or subtract element spaces, and then delete the old vector. This process of creating a copy, modifying, and destroying is more taxing on memory than other data structures.
	Another data type to consider in the creation of this project is the hash-table. One major advantage of using a hash-table is that accessing data from a hash-table is very efficient. Because of how hash-tables are indexed based on keys, if a hash-table is set up well, its runtime to insert, search, and delete data average at O(1) speed. In a worst case scenario, it can still take O(N), but this is unlikely if the hash-table is set up well. This fast method of searching is the primary benefit of using a hash-table.
	One disadvantage of using a hash-table is that if one is not careful when setting it up there can be a lot of collisions. When a collision occurs, the hash-table must go through a process to handle it and reorganize the data. In a large data set this is more likely to occur and become a problem. Another disadvantage of hash-tables is they are more complex to initially create than vectors. That is because each element of the table must be hashed before insertion, and then that hash is checked against previously mentioned collisions. Another disadvantage of using a hash-table is that the data stored in the table cannot be organized in a specific manner. For example, it is important that the data in this project is printed in alphanumeric order. Because of the hashing and bucket sorting inherent to hash-tables, the data cannot simply be stored one after another in alphanumeric order. That means when printing the data one would need to have a separate algorithm for sorting what would neeed to be printed.
	Yet another option for storing the data in this project is the implementation of a BST. One major advantage of using a BST is that it has a very fast search time. Because of how the BST is organized, when searching for a specific value as the algorithm advances through levels of the tree, it can eliminate the need to search through any branches where the value would never be found. This means rather than going one by one through the dataset, it can simply keep taking branches and eliminating branches which cannot yield the correct result. On average, the run time for searching a BST is O(log(N)). Another advantage of BSTs is that inserting and deleting data is also fast. This is because, like with searching, traversing a BST is quick. Like searching, inserting and deleting data from a BST also has a O(log(N)) average run time.
	The main disadvantage to using a BST is that when creating the BST, one must ensure that it is balanced. When creating the dataset or inserting new data, if the BST becomes unbalanced the efficiency of the search is lost and the worst-case scenario for accessing data becomes common. That worst case being a O(N) runtime. This balancing is more complex than inserting an item into a different data set like a vector. 
